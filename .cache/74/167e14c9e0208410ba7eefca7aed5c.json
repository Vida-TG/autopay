{"id":"../node_modules/@near-js/crypto/lib/public_key.js","dependencies":[{"name":"C:\\Users\\LENOVO\\Downloads\\nearpay\\package.json","includedInParent":true,"mtime":1683277982216},{"name":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\crypto\\package.json","includedInParent":true,"mtime":1683142725357},{"name":"@near-js/types","loc":{"line":7,"column":24,"index":268},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\crypto\\lib\\public_key.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\types\\lib\\index.js"},{"name":"borsh","loc":{"line":8,"column":24,"index":311},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\crypto\\lib\\public_key.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\borsh\\lib\\index.js"},{"name":"tweetnacl","loc":{"line":9,"column":44,"index":365},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\crypto\\lib\\public_key.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\crypto\\node_modules\\tweetnacl\\nacl-fast.js"},{"name":"./constants","loc":{"line":10,"column":28,"index":408},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\crypto\\lib\\public_key.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\crypto\\lib\\constants.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PublicKey = void 0;\nconst types_1 = require(\"@near-js/types\");\nconst borsh_1 = require(\"borsh\");\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst constants_1 = require(\"./constants\");\nfunction key_type_to_str(keyType) {\n    switch (keyType) {\n        case constants_1.KeyType.ED25519: return 'ed25519';\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\nfunction str_to_key_type(keyType) {\n    switch (keyType.toLowerCase()) {\n        case 'ed25519': return constants_1.KeyType.ED25519;\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */\nclass PublicKey extends types_1.Assignable {\n    static from(value) {\n        if (typeof value === 'string') {\n            return PublicKey.fromString(value);\n        }\n        return value;\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        if (parts.length === 1) {\n            return new PublicKey({ keyType: constants_1.KeyType.ED25519, data: (0, borsh_1.baseDecode)(parts[0]) });\n        }\n        else if (parts.length === 2) {\n            return new PublicKey({ keyType: str_to_key_type(parts[0]), data: (0, borsh_1.baseDecode)(parts[1]) });\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n    }\n    toString() {\n        return `${key_type_to_str(this.keyType)}:${(0, borsh_1.baseEncode)(this.data)}`;\n    }\n    verify(message, signature) {\n        switch (this.keyType) {\n            case constants_1.KeyType.ED25519: return tweetnacl_1.default.sign.detached.verify(message, signature, this.data);\n            default: throw new Error(`Unknown key type ${this.keyType}`);\n        }\n    }\n}\nexports.PublicKey = PublicKey;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@near-js/crypto/lib/public_key.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}}],"sources":{"../node_modules/@near-js/crypto/lib/public_key.js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PublicKey = void 0;\nconst types_1 = require(\"@near-js/types\");\nconst borsh_1 = require(\"borsh\");\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst constants_1 = require(\"./constants\");\nfunction key_type_to_str(keyType) {\n    switch (keyType) {\n        case constants_1.KeyType.ED25519: return 'ed25519';\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\nfunction str_to_key_type(keyType) {\n    switch (keyType.toLowerCase()) {\n        case 'ed25519': return constants_1.KeyType.ED25519;\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */\nclass PublicKey extends types_1.Assignable {\n    static from(value) {\n        if (typeof value === 'string') {\n            return PublicKey.fromString(value);\n        }\n        return value;\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        if (parts.length === 1) {\n            return new PublicKey({ keyType: constants_1.KeyType.ED25519, data: (0, borsh_1.baseDecode)(parts[0]) });\n        }\n        else if (parts.length === 2) {\n            return new PublicKey({ keyType: str_to_key_type(parts[0]), data: (0, borsh_1.baseDecode)(parts[1]) });\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n    }\n    toString() {\n        return `${key_type_to_str(this.keyType)}:${(0, borsh_1.baseEncode)(this.data)}`;\n    }\n    verify(message, signature) {\n        switch (this.keyType) {\n            case constants_1.KeyType.ED25519: return tweetnacl_1.default.sign.detached.verify(message, signature, this.data);\n            default: throw new Error(`Unknown key type ${this.keyType}`);\n        }\n    }\n}\nexports.PublicKey = PublicKey;\n"},"lineCount":56}},"error":null,"hash":"d61ff4d1626d23ff9a4f92bddc556695","cacheData":{"env":{}}}