{"id":"../node_modules/@near-js/accounts/lib/account_2fa.js","dependencies":[{"name":"C:\\Users\\LENOVO\\Downloads\\nearpay\\package.json","includedInParent":true,"mtime":1683277982216},{"name":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\package.json","includedInParent":true,"mtime":1683142730194},{"name":"@near-js/crypto","loc":{"line":16,"column":25,"index":951},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_2fa.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\crypto\\lib\\index.js"},{"name":"@near-js/types","loc":{"line":17,"column":24,"index":995},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_2fa.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\types\\lib\\index.js"},{"name":"@near-js/providers","loc":{"line":18,"column":28,"index":1042},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_2fa.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\providers\\lib\\index.js"},{"name":"@near-js/transactions","loc":{"line":19,"column":31,"index":1096},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_2fa.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\transactions\\lib\\index.js"},{"name":"bn.js","loc":{"line":20,"column":40,"index":1162},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_2fa.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\bn.js\\lib\\bn.js"},{"name":"./account_multisig","loc":{"line":21,"column":35,"index":1208},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_2fa.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_multisig.js"},{"name":"./constants","loc":{"line":22,"column":28,"index":1259},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_2fa.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\constants.js"},{"name":"./types","loc":{"line":23,"column":24,"index":1299},"parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_2fa.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\types.js"},{"name":"buffer","parent":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\@near-js\\accounts\\lib\\account_2fa.js","resolved":"C:\\Users\\LENOVO\\Downloads\\nearpay\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account2FA = void 0;\nconst crypto_1 = require(\"@near-js/crypto\");\nconst types_1 = require(\"@near-js/types\");\nconst providers_1 = require(\"@near-js/providers\");\nconst transactions_1 = require(\"@near-js/transactions\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst account_multisig_1 = require(\"./account_multisig\");\nconst constants_1 = require(\"./constants\");\nconst types_2 = require(\"./types\");\nconst { addKey, deleteKey, deployContract, fullAccessKey, functionCall, functionCallAccessKey } = transactions_1.actionCreators;\nclass Account2FA extends account_multisig_1.AccountMultisig {\n    constructor(connection, accountId, options) {\n        super(connection, accountId, options);\n        this.helperUrl = 'https://helper.testnet.near.org';\n        this.helperUrl = options.helperUrl || this.helperUrl;\n        this.storage = options.storage;\n        this.sendCode = options.sendCode || this.sendCodeDefault;\n        this.getCode = options.getCode || this.getCodeDefault;\n        this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n        this.onConfirmResult = options.onConfirmResult;\n    }\n    /**\n     * Sign a transaction to preform a list of actions and broadcast it using the RPC API.\n     * @see {@link providers/json-rpc-provider!JsonRpcProvider#sendTransaction | JsonRpcProvider.sendTransaction}\n     */\n    signAndSendTransaction({ receiverId, actions }) {\n        const _super = Object.create(null, {\n            signAndSendTransaction: { get: () => super.signAndSendTransaction }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield _super.signAndSendTransaction.call(this, { receiverId, actions });\n            // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n            yield this.sendCode();\n            const result = yield this.promptAndVerify();\n            if (this.onConfirmResult) {\n                yield this.onConfirmResult(result);\n            }\n            return result;\n        });\n    }\n    // default helpers for CH deployments of multisig\n    deployMultisig(contractBytes) {\n        const _super = Object.create(null, {\n            signAndSendTransactionWithAccount: { get: () => super.signAndSendTransactionWithAccount }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const seedOrLedgerKey = (yield this.getRecoveryMethods()).data\n                .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)\n                .map((rm) => rm.publicKey);\n            const fak2lak = (yield this.getAccessKeys())\n                .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))\n                .map((ak) => ak.public_key)\n                .map(toPK);\n            const confirmOnlyKey = toPK((yield this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n            const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));\n            const actions = [\n                ...fak2lak.map((pk) => deleteKey(pk)),\n                ...fak2lak.map((pk) => addKey(pk, functionCallAccessKey(accountId, constants_1.MULTISIG_CHANGE_METHODS, null))),\n                addKey(confirmOnlyKey, functionCallAccessKey(accountId, constants_1.MULTISIG_CONFIRM_METHODS, null)),\n                deployContract(contractBytes),\n            ];\n            const newFunctionCallActionBatch = actions.concat(functionCall('new', newArgs, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT));\n            console.log('deploying multisig contract for', accountId);\n            const { stateStatus: multisigStateStatus } = yield this.checkMultisigCodeAndStateStatus(contractBytes);\n            switch (multisigStateStatus) {\n                case types_2.MultisigStateStatus.STATE_NOT_INITIALIZED:\n                    return yield _super.signAndSendTransactionWithAccount.call(this, accountId, newFunctionCallActionBatch);\n                case types_2.MultisigStateStatus.VALID_STATE:\n                    return yield _super.signAndSendTransactionWithAccount.call(this, accountId, actions);\n                case types_2.MultisigStateStatus.INVALID_STATE:\n                    throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState');\n                default:\n                    throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n            }\n        });\n    }\n    disableWithFAK({ contractBytes, cleanupContractBytes }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cleanupActions = [];\n            if (cleanupContractBytes) {\n                yield this.deleteAllRequests().catch(e => e);\n                cleanupActions = yield this.get2faDisableCleanupActions(cleanupContractBytes);\n            }\n            const keyConversionActions = yield this.get2faDisableKeyConversionActions();\n            const actions = [\n                ...cleanupActions,\n                ...keyConversionActions,\n                deployContract(contractBytes)\n            ];\n            const accessKeyInfo = yield this.findAccessKey(this.accountId, actions);\n            if (accessKeyInfo && accessKeyInfo.accessKey && accessKeyInfo.accessKey.permission !== 'FullAccess') {\n                throw new types_1.TypedError('No full access key found in keystore. Unable to bypass multisig', 'NoFAKFound');\n            }\n            return this.signAndSendTransactionWithAccount(this.accountId, actions);\n        });\n    }\n    get2faDisableCleanupActions(cleanupContractBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const currentAccountState = yield this.viewState('').catch(error => {\n                const cause = error.cause && error.cause.name;\n                if (cause == 'NO_CONTRACT_CODE') {\n                    return [];\n                }\n                throw cause == 'TOO_LARGE_CONTRACT_STATE'\n                    ? new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState')\n                    : error;\n            });\n            const currentAccountStateKeys = currentAccountState.map(({ key }) => key.toString('base64'));\n            return currentAccountState.length ? [\n                deployContract(cleanupContractBytes),\n                functionCall('clean', { keys: currentAccountStateKeys }, constants_1.MULTISIG_GAS, new bn_js_1.default('0'))\n            ] : [];\n        });\n    }\n    get2faDisableKeyConversionActions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const accessKeys = yield this.getAccessKeys();\n            const lak2fak = accessKeys\n                .filter(({ access_key }) => access_key.permission !== 'FullAccess')\n                .filter(({ access_key }) => {\n                const perm = access_key.permission.FunctionCall;\n                return perm.receiver_id === accountId &&\n                    perm.method_names.length === 4 &&\n                    perm.method_names.includes('add_request_and_confirm');\n            });\n            const confirmOnlyKey = crypto_1.PublicKey.from((yield this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n            return [\n                deleteKey(confirmOnlyKey),\n                ...lak2fak.map(({ public_key }) => deleteKey(crypto_1.PublicKey.from(public_key))),\n                ...lak2fak.map(({ public_key }) => addKey(crypto_1.PublicKey.from(public_key), fullAccessKey()))\n            ];\n        });\n    }\n    /**\n     * This method converts LAKs back to FAKs, clears state and deploys an 'empty' contract (contractBytes param)\n     * @param [contractBytes]{@link https://github.com/near/near-wallet/blob/master/packages/frontend/src/wasm/main.wasm?raw=true}\n     * @param [cleanupContractBytes]{@link https://github.com/near/core-contracts/blob/master/state-cleanup/res/state_cleanup.wasm?raw=true}\n     */\n    disable(contractBytes, cleanupContractBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { stateStatus } = yield this.checkMultisigCodeAndStateStatus();\n            if (stateStatus !== types_2.MultisigStateStatus.VALID_STATE && stateStatus !== types_2.MultisigStateStatus.STATE_NOT_INITIALIZED) {\n                throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n            }\n            let deleteAllRequestsError;\n            yield this.deleteAllRequests().catch(e => deleteAllRequestsError = e);\n            const cleanupActions = yield this.get2faDisableCleanupActions(cleanupContractBytes).catch(e => {\n                if (e.type === 'ContractHasExistingState') {\n                    throw deleteAllRequestsError || e;\n                }\n                throw e;\n            });\n            const actions = [\n                ...cleanupActions,\n                ...(yield this.get2faDisableKeyConversionActions()),\n                deployContract(contractBytes),\n            ];\n            console.log('disabling 2fa for', this.accountId);\n            return yield this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions\n            });\n        });\n    }\n    sendCodeDefault() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const { requestId } = this.getRequest();\n            const method = yield this.get2faMethod();\n            yield this.postSignedJson('/2fa/send', {\n                accountId,\n                method,\n                requestId,\n            });\n            return requestId;\n        });\n    }\n    getCodeDefault() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n        });\n    }\n    promptAndVerify() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const method = yield this.get2faMethod();\n            const securityCode = yield this.getCode(method);\n            try {\n                const result = yield this.verifyCode(securityCode);\n                // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n                return result;\n            }\n            catch (e) {\n                console.warn('Error validating security code:', e);\n                if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n                    return yield this.promptAndVerify();\n                }\n                throw e;\n            }\n        });\n    }\n    verifyCodeDefault(securityCode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const request = this.getRequest();\n            if (!request) {\n                throw new Error('no request pending');\n            }\n            const { requestId } = request;\n            return yield this.postSignedJson('/2fa/verify', {\n                accountId,\n                securityCode,\n                requestId\n            });\n        });\n    }\n    getRecoveryMethods() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            return {\n                accountId,\n                data: yield this.postSignedJson('/account/recoveryMethods', { accountId })\n            };\n        });\n    }\n    get2faMethod() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { data } = yield this.getRecoveryMethods();\n            if (data && data.length) {\n                data = data.find((m) => m.kind.indexOf('2fa-') === 0);\n            }\n            if (!data)\n                return null;\n            const { kind, detail } = data;\n            return { kind, detail };\n        });\n    }\n    signatureFor() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const block = yield this.connection.provider.block({ finality: 'final' });\n            const blockNumber = block.header.height.toString();\n            const signed = yield this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n            const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n            return { blockNumber, blockNumberSignature };\n        });\n    }\n    postSignedJson(path, body) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield (0, providers_1.fetchJson)(this.helperUrl + path, JSON.stringify(Object.assign(Object.assign({}, body), (yield this.signatureFor()))));\n        });\n    }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = (pk) => crypto_1.PublicKey.from(pk);\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/@near-js/accounts/lib/account_2fa.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}}],"sources":{"../node_modules/@near-js/accounts/lib/account_2fa.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account2FA = void 0;\nconst crypto_1 = require(\"@near-js/crypto\");\nconst types_1 = require(\"@near-js/types\");\nconst providers_1 = require(\"@near-js/providers\");\nconst transactions_1 = require(\"@near-js/transactions\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst account_multisig_1 = require(\"./account_multisig\");\nconst constants_1 = require(\"./constants\");\nconst types_2 = require(\"./types\");\nconst { addKey, deleteKey, deployContract, fullAccessKey, functionCall, functionCallAccessKey } = transactions_1.actionCreators;\nclass Account2FA extends account_multisig_1.AccountMultisig {\n    constructor(connection, accountId, options) {\n        super(connection, accountId, options);\n        this.helperUrl = 'https://helper.testnet.near.org';\n        this.helperUrl = options.helperUrl || this.helperUrl;\n        this.storage = options.storage;\n        this.sendCode = options.sendCode || this.sendCodeDefault;\n        this.getCode = options.getCode || this.getCodeDefault;\n        this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n        this.onConfirmResult = options.onConfirmResult;\n    }\n    /**\n     * Sign a transaction to preform a list of actions and broadcast it using the RPC API.\n     * @see {@link providers/json-rpc-provider!JsonRpcProvider#sendTransaction | JsonRpcProvider.sendTransaction}\n     */\n    signAndSendTransaction({ receiverId, actions }) {\n        const _super = Object.create(null, {\n            signAndSendTransaction: { get: () => super.signAndSendTransaction }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield _super.signAndSendTransaction.call(this, { receiverId, actions });\n            // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n            yield this.sendCode();\n            const result = yield this.promptAndVerify();\n            if (this.onConfirmResult) {\n                yield this.onConfirmResult(result);\n            }\n            return result;\n        });\n    }\n    // default helpers for CH deployments of multisig\n    deployMultisig(contractBytes) {\n        const _super = Object.create(null, {\n            signAndSendTransactionWithAccount: { get: () => super.signAndSendTransactionWithAccount }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const seedOrLedgerKey = (yield this.getRecoveryMethods()).data\n                .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)\n                .map((rm) => rm.publicKey);\n            const fak2lak = (yield this.getAccessKeys())\n                .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))\n                .map((ak) => ak.public_key)\n                .map(toPK);\n            const confirmOnlyKey = toPK((yield this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n            const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));\n            const actions = [\n                ...fak2lak.map((pk) => deleteKey(pk)),\n                ...fak2lak.map((pk) => addKey(pk, functionCallAccessKey(accountId, constants_1.MULTISIG_CHANGE_METHODS, null))),\n                addKey(confirmOnlyKey, functionCallAccessKey(accountId, constants_1.MULTISIG_CONFIRM_METHODS, null)),\n                deployContract(contractBytes),\n            ];\n            const newFunctionCallActionBatch = actions.concat(functionCall('new', newArgs, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT));\n            console.log('deploying multisig contract for', accountId);\n            const { stateStatus: multisigStateStatus } = yield this.checkMultisigCodeAndStateStatus(contractBytes);\n            switch (multisigStateStatus) {\n                case types_2.MultisigStateStatus.STATE_NOT_INITIALIZED:\n                    return yield _super.signAndSendTransactionWithAccount.call(this, accountId, newFunctionCallActionBatch);\n                case types_2.MultisigStateStatus.VALID_STATE:\n                    return yield _super.signAndSendTransactionWithAccount.call(this, accountId, actions);\n                case types_2.MultisigStateStatus.INVALID_STATE:\n                    throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState');\n                default:\n                    throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n            }\n        });\n    }\n    disableWithFAK({ contractBytes, cleanupContractBytes }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cleanupActions = [];\n            if (cleanupContractBytes) {\n                yield this.deleteAllRequests().catch(e => e);\n                cleanupActions = yield this.get2faDisableCleanupActions(cleanupContractBytes);\n            }\n            const keyConversionActions = yield this.get2faDisableKeyConversionActions();\n            const actions = [\n                ...cleanupActions,\n                ...keyConversionActions,\n                deployContract(contractBytes)\n            ];\n            const accessKeyInfo = yield this.findAccessKey(this.accountId, actions);\n            if (accessKeyInfo && accessKeyInfo.accessKey && accessKeyInfo.accessKey.permission !== 'FullAccess') {\n                throw new types_1.TypedError('No full access key found in keystore. Unable to bypass multisig', 'NoFAKFound');\n            }\n            return this.signAndSendTransactionWithAccount(this.accountId, actions);\n        });\n    }\n    get2faDisableCleanupActions(cleanupContractBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const currentAccountState = yield this.viewState('').catch(error => {\n                const cause = error.cause && error.cause.name;\n                if (cause == 'NO_CONTRACT_CODE') {\n                    return [];\n                }\n                throw cause == 'TOO_LARGE_CONTRACT_STATE'\n                    ? new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState')\n                    : error;\n            });\n            const currentAccountStateKeys = currentAccountState.map(({ key }) => key.toString('base64'));\n            return currentAccountState.length ? [\n                deployContract(cleanupContractBytes),\n                functionCall('clean', { keys: currentAccountStateKeys }, constants_1.MULTISIG_GAS, new bn_js_1.default('0'))\n            ] : [];\n        });\n    }\n    get2faDisableKeyConversionActions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const accessKeys = yield this.getAccessKeys();\n            const lak2fak = accessKeys\n                .filter(({ access_key }) => access_key.permission !== 'FullAccess')\n                .filter(({ access_key }) => {\n                const perm = access_key.permission.FunctionCall;\n                return perm.receiver_id === accountId &&\n                    perm.method_names.length === 4 &&\n                    perm.method_names.includes('add_request_and_confirm');\n            });\n            const confirmOnlyKey = crypto_1.PublicKey.from((yield this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n            return [\n                deleteKey(confirmOnlyKey),\n                ...lak2fak.map(({ public_key }) => deleteKey(crypto_1.PublicKey.from(public_key))),\n                ...lak2fak.map(({ public_key }) => addKey(crypto_1.PublicKey.from(public_key), fullAccessKey()))\n            ];\n        });\n    }\n    /**\n     * This method converts LAKs back to FAKs, clears state and deploys an 'empty' contract (contractBytes param)\n     * @param [contractBytes]{@link https://github.com/near/near-wallet/blob/master/packages/frontend/src/wasm/main.wasm?raw=true}\n     * @param [cleanupContractBytes]{@link https://github.com/near/core-contracts/blob/master/state-cleanup/res/state_cleanup.wasm?raw=true}\n     */\n    disable(contractBytes, cleanupContractBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { stateStatus } = yield this.checkMultisigCodeAndStateStatus();\n            if (stateStatus !== types_2.MultisigStateStatus.VALID_STATE && stateStatus !== types_2.MultisigStateStatus.STATE_NOT_INITIALIZED) {\n                throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n            }\n            let deleteAllRequestsError;\n            yield this.deleteAllRequests().catch(e => deleteAllRequestsError = e);\n            const cleanupActions = yield this.get2faDisableCleanupActions(cleanupContractBytes).catch(e => {\n                if (e.type === 'ContractHasExistingState') {\n                    throw deleteAllRequestsError || e;\n                }\n                throw e;\n            });\n            const actions = [\n                ...cleanupActions,\n                ...(yield this.get2faDisableKeyConversionActions()),\n                deployContract(contractBytes),\n            ];\n            console.log('disabling 2fa for', this.accountId);\n            return yield this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions\n            });\n        });\n    }\n    sendCodeDefault() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const { requestId } = this.getRequest();\n            const method = yield this.get2faMethod();\n            yield this.postSignedJson('/2fa/send', {\n                accountId,\n                method,\n                requestId,\n            });\n            return requestId;\n        });\n    }\n    getCodeDefault() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n        });\n    }\n    promptAndVerify() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const method = yield this.get2faMethod();\n            const securityCode = yield this.getCode(method);\n            try {\n                const result = yield this.verifyCode(securityCode);\n                // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n                return result;\n            }\n            catch (e) {\n                console.warn('Error validating security code:', e);\n                if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n                    return yield this.promptAndVerify();\n                }\n                throw e;\n            }\n        });\n    }\n    verifyCodeDefault(securityCode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const request = this.getRequest();\n            if (!request) {\n                throw new Error('no request pending');\n            }\n            const { requestId } = request;\n            return yield this.postSignedJson('/2fa/verify', {\n                accountId,\n                securityCode,\n                requestId\n            });\n        });\n    }\n    getRecoveryMethods() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            return {\n                accountId,\n                data: yield this.postSignedJson('/account/recoveryMethods', { accountId })\n            };\n        });\n    }\n    get2faMethod() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let { data } = yield this.getRecoveryMethods();\n            if (data && data.length) {\n                data = data.find((m) => m.kind.indexOf('2fa-') === 0);\n            }\n            if (!data)\n                return null;\n            const { kind, detail } = data;\n            return { kind, detail };\n        });\n    }\n    signatureFor() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId } = this;\n            const block = yield this.connection.provider.block({ finality: 'final' });\n            const blockNumber = block.header.height.toString();\n            const signed = yield this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n            const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n            return { blockNumber, blockNumberSignature };\n        });\n    }\n    postSignedJson(path, body) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield (0, providers_1.fetchJson)(this.helperUrl + path, JSON.stringify(Object.assign(Object.assign({}, body), (yield this.signatureFor()))));\n        });\n    }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = (pk) => crypto_1.PublicKey.from(pk);\n"},"lineCount":273}},"error":null,"hash":"308f83331426679a32937c4437d8be45","cacheData":{"env":{}}}